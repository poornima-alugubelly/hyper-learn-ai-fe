name: Automated npm Updates

on:
  schedule:
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no PR created)'
        required: false
        default: false
        type: boolean

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions: # Explicitly set permissions for GITHUB_TOKEN
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }} 
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install current dependencies
      run: npm install --ignore-scripts # Initial install, ignore-scripts for speed/safety if not needed
    
    - name: Create backup and excluded packages list
      run: |
        # Define packages to exclude from updates
        EXCLUDED_PACKAGES=(
          "react"
          "react-dom"
          "@types/node"
          "typescript"
          "webpack"
          "eslint"
          "jest"
          "lodash"
          "express"
          "axios"
        )
        
        # Create backups
        cp package.json package.json.backup
        cp package-lock.json package-lock.json.backup
        
        echo "EXCLUDED_PACKAGES_STR=${EXCLUDED_PACKAGES[*]}" >> $GITHUB_ENV
        echo "Original package.json and package-lock.json backed up."
    
    - name: Temporarily Pin Excluded Packages to Exact Resolved Versions
      env:
        EXCLUDED_PACKAGES_ENV: ${{ env.EXCLUDED_PACKAGES_STR }}
      run: |
        echo "Temporarily pinning excluded packages in live package.json..."
        node -e "
          const fs = require('fs');
          const child_process = require('child_process');
          const excluded = (process.env.EXCLUDED_PACKAGES_ENV || '').split(' ').filter(p => p);
          if (excluded.length === 0) {
            console.log('No packages to exclude/pin.');
            process.exit(0);
          }

          const pkgJsonPath = 'package.json';
          let pkg = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf8'));
          let lockPkg = JSON.parse(fs.readFileSync('package-lock.json.backup', 'utf8')); // Read from backup for original resolved versions

          let changed = false;
          for (const depName of excluded) {
            let currentResolvedVersion = null;
            
            // Try to get from package-lock.json's 'packages' structure (npm v7+)
            if (lockPkg.packages && lockPkg.packages[\`node_modules/\${depName}\`]) {
                currentResolvedVersion = lockPkg.packages[\`node_modules/\${depName}\`].version;
            } 
            // Fallback for older lockfiles or direct dependencies not in 'packages' but in 'dependencies' block of lockfile
            else if (lockPkg.dependencies && lockPkg.dependencies[depName]) {
                 currentResolvedVersion = lockPkg.dependencies[depName].version;
            }
            // As a last resort, try npm list (slower)
            else {
                try {
                    const listOutput = child_process.execSync(\`npm list \${depName} --json --depth=0\`, { encoding: 'utf8' });
                    const listParsed = JSON.parse(listOutput);
                    if (listParsed.dependencies && listParsed.dependencies[depName]) {
                        currentResolvedVersion = listParsed.dependencies[depName].version;
                    }
                } catch (e) {
                    console.warn(\`Could not determine resolved version for \${depName} via npm list: \${e.message}\`);
                }
            }

            if (currentResolvedVersion) {
              console.log(\`Found resolved version for '\${depName}': \${currentResolvedVersion}\`);
              if (pkg.dependencies && pkg.dependencies[depName]) {
                if (pkg.dependencies[depName] !== currentResolvedVersion) {
                  console.log(\`Pinning '\${depName}' in dependencies from '\${pkg.dependencies[depName]}' to '\${currentResolvedVersion}'\`);
                  pkg.dependencies[depName] = currentResolvedVersion;
                  changed = true;
                }
              } else if (pkg.devDependencies && pkg.devDependencies[depName]) {
                if (pkg.devDependencies[depName] !== currentResolvedVersion) {
                  console.log(\`Pinning '\${depName}' in devDependencies from '\${pkg.devDependencies[depName]}' to '\${currentResolvedVersion}'\`);
                  pkg.devDependencies[depName] = currentResolvedVersion;
                  changed = true;
                }
              } else {
                console.warn(\`Excluded package '\${depName}' not found in package.json dependencies or devDependencies.\`);
              }
            } else {
              console.warn(\`Could not find resolved version for excluded package '\${depName}'. It might not be installed or is a sub-dependency not listed directly.\`);
            }
          }
          if (changed) {
            fs.writeFileSync(pkgJsonPath, JSON.stringify(pkg, null, 2) + '\\n');
            console.log('Live package.json updated with pinned versions for excluded packages.');
          } else {
            console.log('No changes made to live package.json for pinning.');
          }
        "
    
    - name: Run npm update (respecting temporarily pinned versions)
      run: |
        echo "Running npm update..."
        npm update --ignore-scripts || echo "npm update completed with non-zero exit code, proceeding..."
        echo "npm update finished."

    - name: Restore Original package.json
      run: |
        echo "Restoring original package.json from backup..."
        cp package.json.backup package.json
        echo "Original package.json restored."

    - name: Run Final npm install
      run: |
        echo "Running final npm install to ensure consistency..."
        npm install --ignore-scripts
        echo "Final npm install finished."

    - name: Clean up backup files
      if: always()
      run: |
        rm -f package.json.backup package-lock.json.backup
    
    - name: Check for changes
      id: git-check
      run: |
        if git diff --quiet HEAD -- package.json package-lock.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in package.json or package-lock.json after update process."
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff --name-only HEAD -- package.json package-lock.json
        fi
    
    - name: Show what was updated
      if: steps.git-check.outputs.changes == 'true'
      run: |
        echo "📦 Updated packages (diff on package.json):"
        git diff HEAD -- package.json | grep -E '^\+.*".*":' | sed 's/^+//' || echo "No direct dependency changes in package.json diff"
        echo ""
        echo "📊 Package-lock changes (stat):"
        git diff --stat HEAD -- package-lock.json

    - name: Generate branch name
      if: steps.git-check.outputs.changes == 'true' 
      id: vars
      run: echo "branch_name=automated-npm-updates-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request
      if: steps.git-check.outputs.changes == 'true' && github.event.inputs.dry_run != 'true'
      uses: peter-evans/create-pull-request@v5 
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        commit-message: "chore: update npm dependencies (preserving excluded)"
        title: "🔄 NPM Update (preserving excluded packages)"
        body: |
          ## 📦 NPM Dependencies Update
          
          This PR updates npm dependencies using `npm update`, while attempting to preserve the state of excluded packages.
          
          ### 🚫 Excluded Packages (Attempted Preservation)
          The following packages were targeted for preservation (original specifiers restored after update):
          ```
          ${{ env.EXCLUDED_PACKAGES_STR }}
          ```
          
          ### 📋 What Changed
          - `npm update` was run to update non-excluded direct dependencies and all transitive dependencies.
          - Original version specifiers for excluded packages were restored to `package.json`.
          - A final `npm install` was run to ensure consistency.
          
          **Note:** While excluded package specifiers in `package.json` are restored, their resolved versions in `package-lock.json` might still change if updates to other packages create unavoidable dependency conflicts.
          
          ### ✅ Pre-merge Checklist
          - [ ] Review `package.json` and `package-lock.json` for intended changes.
          - [ ] Verify that excluded packages behave as expected.
          - [ ] Run tests locally to verify compatibility.
          
          ### 🔍 How to Test Locally
          ```bash
          # The branch name will be: ${{ steps.vars.outputs.branch_name }}
          git fetch origin
          git checkout ${{ steps.vars.outputs.branch_name }}
          npm install
          npm test
          npm run build
          ```
          
          ---
          *This PR was created automatically by GitHub Actions*
        branch: ${{ steps.vars.outputs.branch_name }}
        delete-branch: true